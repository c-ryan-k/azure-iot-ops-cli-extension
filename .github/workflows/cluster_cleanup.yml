name: "Cluster Resource Cleanup"
on:
  # On workflow call (by another workflow) - require all inputs and secrets
  workflow_call:
    inputs:
      cluster_prefix:
        type: string
        description: "Prefix of cluster/resources to cleanup"
        required: true
      resource_group:
        type: string
        description: "Resource group to clean up"
        required: true
      keyvault_prefix:
        type: string
        description: "Prefix of keyvault to delete"
        required: true
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
  # On manual dispatch from repo - only RG is required
  workflow_dispatch:
    inputs:
      resource_group:
        type: string
        description: "Resource group to clean up"
        required: true
        default: ops-cli-int-test-rg
  # Run every night at midnight (Pacific) to cleanup resources
  schedule:
    - cron: "0 8 * * *"

env:
  RESOURCE_GROUP: ${{ inputs.resource_group || 'ops-cli-int-test-rg' }}
  CLUSTER_PREFIX: ${{ inputs.cluster_prefix || 'az-iot-ops-test-cluster' }}
  KEYVAULT_PREFIX: ${{ inputs.keyvault_prefix || 'opskv' }}

permissions:
  # required for OpenID federation
  contents: "read"
  id-token: "write"

jobs:
  keyvault-cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: Az CLI login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Delete keyvaults
        uses: azure/cli@v2
        with:
          azcliversion: 2.58.0
          inlineScript: |
            for vault in $(az keyvault list --query "[?starts_with(name, '${{ env.KEYVAULT_PREFIX }}')].name" -o tsv); do
              az keyvault delete -n $vault -g ${{ env.RESOURCE_GROUP }} --no-wait
            done
  resource-cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: Az CLI login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Install extensions
        run: |
          az extension add -n connectedk8s -y
          # TODO - install from source
          az extension add -n azure-iot-ops -y
      - name: Delete clusters
        run: |
          for cluster in $(az connectedk8s list -g ${{ env.RESOURCE_GROUP }} --query "[?starts_with(name, '${{ env.CLUSTER_PREFIX }}')].name" -o tsv); do
            az iot ops delete --cluster $cluster -g ${{ env.RESOURCE_GROUP }} --force
          done