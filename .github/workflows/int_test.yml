name: Integration tests
on:
  workflow_call:
    inputs:
      resource_group:
        description: Resource group for cluster creation. SP should have permissions to this group
        type: string
        required: false
        default: ops-cli-int-test-rg
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      AZURE_OBJECT_ID:
        required: true
      AZURE_CLIENT_SECRET:
        required: true

env:
  EXTENSION_SOURCE_DIRECTORY: "./azure-iot-ops-cli-extension"
  CUSTOM_LOCATIONS_OID: 51dfe1e8-70c6-4de5-a08e-e18aff23d815
  K3D_VERSION: v5.5.1
  RUN_SUFFIX: "${{ github.run_id }}-${{ github.run_attempt }}"

jobs:
  integration_test:
    permissions:
      contents: 'read'
      id-token: 'write'
    name: Integration test ${{ matrix.py }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py:
          - "3.10"
    steps:
      - name: Setup python ${{ matrix.py }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.py }}
      - name: Checkout extension source
        uses: actions/checkout@v3
        with:
          # ensure source checkout uses our reference instead of calling workflow
          repository: azure/azure-iot-ops-cli-extension
          path: ${{ env.EXTENSION_SOURCE_DIRECTORY }}
      - name: k3d cluster create
        run: |
          release_url="https://github.com/k3d-io/k3d/releases/download"
          k3d_binary="k3d-linux-amd64"
          k3d_url="$release_url/${{ env.K3D_VERSION }}/$k3d_binary"
          k3d_install_dir="/usr/local/bin"

          # install k3d
          curl -sL $k3d_url -o "$k3d_binary"
          sudo chmod +x "$k3d_binary"
          sudo cp "$k3d_binary" "$k3d_install_dir/k3d"

          # create cluster
          export K3D_FIX_MOUNTS=1
          k3d cluster create -i ghcr.io/jlian/k3d-nfs:v1.25.3-k3s1 \
          -p '1883:1883@loadbalancer' \
          -p '8883:8883@loadbalancer' \
          -p '6001:6001@loadbalancer' \
          -p '4000:80@loadbalancer'
      - name: Az CLI login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Build and install IoT Ops extension
        run: |
          pip install wheel==0.30.0
          cd ${{ env.EXTENSION_SOURCE_DIRECTORY }}
          python -m setup bdist_wheel -d dist
          wheel=$(find ./dist/*.whl)
          az extension add --source $wheel -y
      - name: Set resource group, keyvault, and cluster name
        run: |
            CLUSTER_NAME="az-iot-ops-test-cluster-${{ env.RUN_SUFFIX }}"
            CLUSTER_RG="${{ inputs.resource_group }}"
            KV_NAME="az-iot-ops-test-kv-${{ env.RUN_SUFFIX }}"

            echo "CLUSTER_NAME=$CLUSTER_NAME" >> $GITHUB_ENV
            echo "CLUSTER_RG=$CLUSTER_RG" >> $GITHUB_ENV
            echo "KV_NAME=$KV_NAME" >> $GITHUB_ENV
      - name: ARC connect cluster
        run: >-
          az extension add --name connectedk8s -y

          az connectedk8s connect -n ${{ env.CLUSTER_NAME }} -g ${{ env.CLUSTER_RG }}

          az connectedk8s enable-features
          -n ${{ env.CLUSTER_NAME }}
          -g ${{ env.CLUSTER_RG }}
          --features custom-locations cluster-connect
          --custom-locations-oid ${{ env.CUSTOM_LOCATIONS_OID }}
      - name: AIO Deployment
        run: >-
          az iot ops init
          -g ${{ env.CLUSTER_RG }}
          --cluster ${{ env.CLUSTER_NAME }}
          --kv-id $(az keyvault create -n ${{ env.KV_NAME }} -g ${{ env.CLUSTER_RG }} -o tsv --query id)
          --sp-app-id ${{ secrets.AZURE_CLIENT_ID }}
          --sp-object-id ${{ secrets.AZURE_OBJECT_ID }}
          --sp-secret ${{ secrets.AZURE_CLIENT_SECRET }}
          --no-progress
      - name: Run 'az iot ops check'
        run: |
          az iot ops check >> $GITHUB_STEP_SUMMARY
      - name: Clean up resources
        if: always()
        continue-on-error: true
        run: |
            az connectedk8s delete -n ${{ env.CLUSTER_NAME }} -g ${{ env.CLUSTER_RG }} -y
            az keyvault delete -n ${{ env.KV_NAME }} -g ${{ env.CLUSTER_RG }} -y
