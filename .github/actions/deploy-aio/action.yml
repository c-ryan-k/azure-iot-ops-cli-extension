# Copyright (c) Microsoft. All rights reserved.
# Licensed under the MIT license. See LICENSE file in the project root for full license information.

# This workflow assumes your cluster is already connected to ARC
name: 'Deploy Azure IoT Operations to a connected cluster'
description: |
  Action to deploy Azure IoT Operations resources to an existing ARC-connected cluster using the `azure-iot-ops` CLI extension.
  If `config` is provided, it will be written as a file to ~/.kube/config and used to connect to your cluster. 
  Otherwise, your local `~/.kube/config` file will be used.
inputs: 
  # cluster resource
  cluster:
    description: 'Name of ARC connected cluster.'
    required: true
  resource-group:
    description: 'Resource group for deployment.'
    required: true
  # init configs
  init:
    description: 'Whether or not to run `az iot ops init` to deploy foundation services'
    default: 'true'
  enable-fault-tolerance:
    description: 'Enable fault tolerance for Azure Arc Container Storage. At least 3 cluster nodes are required.'
  # instance
  instance:
    description: 'Name of the AIO instance.'
    required: true
  description:
    description: 'Description of the AIO instance.'
  tags:
    description: 'Tags to apply to the AIO instance.'
  # CLI-specific configuration
  no-preflight:
    description: 'Disable preflight checks for deployment.'
  debug:
    description: 'Run `az iot ops init` with debugging output.'
  # deployment customization
  schema-registry-id:
    description: 'Schema registry resource ID to use for the deployment.'
    required: true
  cluster-namespace:
    description: 'Cluster namespace AIO infra will be deployed to.'
  custom-location:
    description: 'Custom location namespace corresponding to the AIO deployment.'
  ops-config:
    description: 'IoT Operations arc extension custom configuration'
  enable-rsync:
    description: 'Resource sync rules will be added to the deployment.'
  location:
    description: 'ARM location for RPSaaS collateral.'
  add-insecure-listener:
    description: |
      Deploy with `--mq-insecure` which will include a listener bound to
      port 1883 with no authN or authZ. The broker encryptInternalTraffic setting
      will be set to false. For non-production workloads only.
  trust-settings:
    description: 'Trust settings configuration to use for the deployment. Will enable user trust, and therefore disable system cert-manager and trust-manager deployments.'
  # TODO - probably need to break these into chunks and validate each input
  # broker stuff
  broker-args:
    description: 'Broker configuration arguments to pass to the deployment.'
  # dataflow stuff
  dataflow-args:
    description: 'Dataflow configuration arguments to pass to the deployment.'
  # akri stuff
  akri-args:
    description: 'Akri configuration arguments to pass to the deployment.'

runs:
  using: 'composite'
  steps:
    - name: "Install azure-iot-ops extension"
      run: az extension add -n azure-iot-ops -y
      shell: bash
    - name: "Deploy foundation services"
      if: inputs.init == 'true'
      env:
        AIO_CLI_INIT_PREFLIGHT_DISABLED: ${{ inputs.no-preflight }}
        cluster: ${{ format('--cluster "{0}"', inputs.cluster) }}
        resource-group: ${{ format('--resource-group "{0}"', inputs.resource-group) }}
        enable-fault-tolerance: ${{ inputs.enable-fault-tolerance == 'true' && '--enable-fault-tolerance' || '' }}
        user-trust: ${{ inputs.trust-settings != '' && '--user-trust' || '' }}
        debug: ${{ inputs.debug == 'true' && '--debug' || '' }}
      run: >-
          az iot ops init
          ${{ env.cluster }}
          ${{ env.resource-group }}
          ${{ env.enable-fault-tolerance }}
          ${{ env.user-trust }}
          ${{ env.debug }}
          --no-progress
      shell: bash
    - name: "Deploy AIO instance"
      env:
        AIO_CLI_INIT_PREFLIGHT_DISABLED: ${{ inputs.no-preflight }}
        cluster: ${{ format('--cluster "{0}"', inputs.cluster) }}
        resource-group: ${{ format('--resource-group "{0}"', inputs.resource-group) }}
        instance: ${{ format('--name "{0}"', inputs.instance) }}
        schema-registry-id: ${{ format('--sr-resource-id "{0}"', inputs.schema-registry-id) }}
        description: ${{ format('--description "{0}"', inputs.description) }}
        tags: ${{ format('--tags "{0}"', inputs.tags) }}
        cluster-namespace: ${{ format('--cluster-namespace "{0}"', inputs.cluster-namespace) }}
        custom-location: ${{ format('--custom-location "{0}"', inputs.custom-location) }}
        enable-rsync: ${{ inputs.enable-rsync == 'true' && '--enable-rsync' || '' }}
        location: ${{ format('--location "{0}"', inputs.location) }}
        add-insecure-listener: ${{ inputs.add-insecure-listener == 'true' && '--add-insecure-listener' || '' }}
        trust-settings: ${{ format('--trust-settings "{0}"', inputs.trust-settings) }}
        ops-config: ${{ format('--ops-config "{0}"', inputs.ops-config) }}
        debug: ${{ inputs.debug == 'true' && '--debug' || '' }}
      run: >-
        az iot ops create
        ${{ env.cluster }}
        ${{ env.resource-group }}
        ${{ env.instance }}
        ${{ env.schema-registry-id }}
        ${{ env.description }}
        ${{ env.tags }}
        ${{ env.cluster-namespace }}
        ${{ env.custom-location }}
        ${{ env.enable-rsync }}
        ${{ env.location }}
        ${{ env.add-insecure-listener }}
        ${{ env.trust-settings }}
        ${{ env.ops-config }}
        ${{ env.debug }}
        --no-progress
      shell: bash
